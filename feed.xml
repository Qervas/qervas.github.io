<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://qervas.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://qervas.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-16T18:17:57+00:00</updated><id>https://qervas.github.io/feed.xml</id><title type="html">Frank Yin</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Fixing Blank Window When Adding Online Accounts in Fedora Linux</title><link href="https://qervas.github.io/blog/2024/black-window-fedora-online-account/" rel="alternate" type="text/html" title="Fixing Blank Window When Adding Online Accounts in Fedora Linux"/><published>2024-10-16T12:01:00+00:00</published><updated>2024-10-16T12:01:00+00:00</updated><id>https://qervas.github.io/blog/2024/black-window-fedora-online-account</id><content type="html" xml:base="https://qervas.github.io/blog/2024/black-window-fedora-online-account/"><![CDATA[<h3 id="problem-overview">Problem Overview</h3> <p>Many Fedora Linux users have encountered a frustrating issue when trying to add online accounts through the GNOME Settings. Upon clicking to add an account, they’re met with a blank window, preventing them from proceeding further.</p> <h3 id="the-solution">The Solution</h3> <p>Fortunately, there’s a simple workaround for this problem. The solution, found on Reddit, involves running the GNOME Control Center with a specific environment variable:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">WEBKIT_DISABLE_COMPOSITING_MODE</span><span class="o">=</span>1 gnome-control-center
</code></pre></div></div> <p>This command disables the WebKit compositing mode, which appears to be the root cause of the blank window issue.</p> <h3 id="before-and-after">Before and After</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/date/Oct_16_2024/before-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/date/Oct_16_2024/before-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/date/Oct_16_2024/before-1400.webp"/> <img src="/assets/img/date/Oct_16_2024/before.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/date/Oct_16_2024/after-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/date/Oct_16_2024/after-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/date/Oct_16_2024/after-1400.webp"/> <img src="/assets/img/date/Oct_16_2024/after.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Left: Blank window issue. Right: Properly functioning online accounts window. </div> <h3 id="how-to-apply-the-fix">How to Apply the Fix</h3> <ol> <li>Open a terminal in Fedora.</li> <li>Copy and paste the following command: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">WEBKIT_DISABLE_COMPOSITING_MODE</span><span class="o">=</span>1 gnome-control-center
</code></pre></div> </div> </li> <li>Press Enter to run the command.</li> <li>The GNOME Control Center will open, and you should now be able to add online accounts without encountering the blank window issue.</li> </ol> <h3 id="why-this-works">Why This Works</h3> <p>The <code class="language-plaintext highlighter-rouge">WEBKIT_DISABLE_COMPOSITING_MODE=1</code> environment variable tells WebKit to disable its compositing mode. This mode is typically used for hardware acceleration and smooth animations, but in this case, it seems to be causing conflicts with the GNOME Online Accounts interface.</p> <h3 id="conclusion">Conclusion</h3> <p>While this is a temporary workaround, it effectively solves the blank window problem for adding online accounts in Fedora Linux. It’s a simple solution that doesn’t require any system modifications or additional software installations.</p> <h3 id="references">References</h3> <ul> <li><a href="https://www.reddit.com/r/Fedora/comments/9uopvp/blank_screen_while_adding_account_on_gnome_online/">Reddit thread discussing the solution</a></li> </ul>]]></content><author><name></name></author><category term="Tech"/><category term="Fedora"/><category term="Linux"/><category term="GNOME"/><category term="Troubleshooting"/><summary type="html"><![CDATA[A simple solution to the blank window issue in Fedora's GNOME Online Accounts]]></summary></entry><entry><title type="html">Successfully Built OpenCV with CUDA on Fedora</title><link href="https://qervas.github.io/blog/2024/fedora-opencv-build-with-cuda/" rel="alternate" type="text/html" title="Successfully Built OpenCV with CUDA on Fedora"/><published>2024-10-13T08:32:00+00:00</published><updated>2024-10-13T08:32:00+00:00</updated><id>https://qervas.github.io/blog/2024/fedora-opencv-build-with-cuda</id><content type="html" xml:base="https://qervas.github.io/blog/2024/fedora-opencv-build-with-cuda/"><![CDATA[<blockquote> <p>Building OpenCV from source with CUDA, cuDNN, and GAPI support on Fedora</p> </blockquote> <h3 id="problem-overview">Problem Overview</h3> <p>Building OpenCV from source can be challenging, especially when integrating additional modules like CUDA, cuDNN, and G-API. This process involves navigating through various dependencies, configuration options, and potential pitfalls.</p> <h3 id="initial-analysis">Initial Analysis</h3> <p>Initially, I considered using pre-built OpenCV binaries, which offer:</p> <ul> <li><strong>Ease of Installation</strong>: Simple package manager commands for quick setup.</li> <li><strong>Stability</strong>: Tested versions that work out of the box.</li> <li><strong>Limited Features</strong>: Often lack support for advanced capabilities like GPU acceleration.</li> </ul> <p>While pre-built binaries seemed promising due to their simplicity, the lack of advanced features and customization options led me to explore building from source.</p> <h3 id="transition-to-building-from-source">Transition to Building from Source</h3> <p>Recognizing the limitations of pre-built binaries, I shifted to a more comprehensive approach of building OpenCV from source. This method allows for:</p> <ul> <li>Full control over included modules and features</li> <li>Integration of CUDA and cuDNN for GPU acceleration</li> <li>Inclusion of specialized modules like G-API</li> </ul> <h3 id="detailed-solution">Detailed Solution</h3> <ol> <li><strong>System Setup</strong>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dnf update
<span class="nb">sudo </span>dnf <span class="nb">install </span>cmake gcc gcc-c++ git libpng-devel libtiff-devel libjpeg-devel ffmpeg-devel gtk3-devel qt5-qtbase-devel python3-devel python3-numpy
</code></pre></div> </div> <p>Install CUDA and cuDNN: cuda link: https://developer.nvidia.com/cuda-downloads cudnn link: https://developer.nvidia.com/cudnn</p> </li> </ol> <p>Then copy the <code class="language-plaintext highlighter-rouge">*.h</code> files to <code class="language-plaintext highlighter-rouge">/usr/local/cuda/include</code> and <code class="language-plaintext highlighter-rouge">*.so</code> files to <code class="language-plaintext highlighter-rouge">/usr/local/cuda/lib64</code>.(<strong>With symbolic links</strong>)</p> <ol> <li><strong>Clone Repositories</strong>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/Library/opencv_build
<span class="nb">cd</span> ~/Library/opencv_build
git clone https://github.com/opencv/opencv.git
git clone https://github.com/opencv/opencv_contrib.git
</code></pre></div> </div> </li> <li><strong>Clone ade for G-API</strong>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Library/opencv_build/opencv
git clone https://github.com/opencv/ade.git 3rdparty/ade
</code></pre></div> </div> </li> <li><strong>Configure with CMake</strong>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Library/opencv_build/opencv
<span class="nb">mkdir </span>build <span class="o">&amp;&amp;</span> <span class="nb">cd </span>build
cmake <span class="nt">-DOPENCV_EXTRA_MODULES_PATH</span><span class="o">=</span>~/Library/opencv_build/opencv_contrib/modules <span class="se">\</span>
      <span class="nt">-DWITH_CUDA</span><span class="o">=</span>ON <span class="se">\</span>
      <span class="nt">-DWITH_CUDNN</span><span class="o">=</span>ON <span class="se">\</span>
      <span class="nt">-DCUDA_ARCH_BIN</span><span class="o">=</span>9.0 <span class="se">\</span>
      <span class="nt">-DWITH_TBB</span><span class="o">=</span>ON <span class="se">\</span>
      <span class="nt">-DBUILD_opencv_world</span><span class="o">=</span>ON <span class="se">\</span>
      <span class="nt">-DBUILD_opencv_python3</span><span class="o">=</span>ON <span class="se">\</span>
      <span class="nt">-DWITH_QT</span><span class="o">=</span>ON <span class="se">\</span>
      <span class="nt">-DWITH_GSTREAMER</span><span class="o">=</span>ON ..
      <span class="c"># example configuration, adjust as needed</span>
</code></pre></div> </div> <p>A more recommended way is to use CMake GUI to configure the build options.</p> <ul> <li>Tick all options with “cuda”</li> <li>Set <code class="language-plaintext highlighter-rouge">CUDA_ARCH_BIN</code> to the appropriate value for your GPU. You can find the supported values <a href="https://developer.nvidia.com/cuda-gpus">here</a>. For me it’s 9.0 with cuda 12.6.</li> <li>Cancel those options that you don’t need. For example, I don’t need with <code class="language-plaintext highlighter-rouge">java</code>, <code class="language-plaintext highlighter-rouge">js</code>.</li> <li>Highly recommend to read all configuration options and adjust them according to your needs.</li> <li><code class="language-plaintext highlighter-rouge">BUILD_opencv_world=ON</code> to build all modules in one library.</li> <li><code class="language-plaintext highlighter-rouge">sudo dnf install openblas-devel</code> if you want to use openblas instead of MKL.</li> <li>set module path to <code class="language-plaintext highlighter-rouge">~/Library/opencv_build/opencv_contrib/modules</code> to include all modules from the contrib repository.</li> <li>Download Nvidia Video Codec SDK from <a href="https://developer.nvidia.com/nvidia-video-codec-sdk">here</a>. Extract <code class="language-plaintext highlighter-rouge">*.h</code> files to <code class="language-plaintext highlighter-rouge">/usr/local/cuda/include</code> and <code class="language-plaintext highlighter-rouge">*.so</code> files(depends on the arch) to <code class="language-plaintext highlighter-rouge">/usr/local/cuda/lib64</code>.</li> </ul> </li> <li><strong>Build and Install</strong>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make <span class="nt">-j</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span>
<span class="nb">sudo </span>make <span class="nb">install
sudo </span>ldconfig
</code></pre></div> </div> </li> </ol> <p>This approach effectively builds OpenCV with CUDA, cuDNN on Fedora. The process involves careful management of dependencies and configuration options, resulting in a customized OpenCV installation with advanced features. The default <code class="language-plaintext highlighter-rouge">dnf</code> package manager may not provide all the necessary components, say Cuda support, necessitating manual installation and configuration. However, the flexibility and performance gains achieved through this method make it a worthwhile endeavor for developers seeking optimized OpenCV builds.</p> <p>( ͡❛ ͜ʖ ͡❛)</p> <h3 id="appendix">Appendix</h3> <p>Python code to test OpenCV with CUDA:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">cv2</span>
<span class="nf">print</span><span class="p">(</span><span class="n">cv2</span><span class="p">.</span><span class="nf">getBuildInformation</span><span class="p">())</span>
</code></pre></div></div> <p>Output:</p> <blockquote> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>General configuration <span class="k">for </span>OpenCV 4.10.0-dev 
<span class="o">=====================================</span>
 Version control:               4.10.0-318-g08f7f13dfa

 Extra modules:
   Location <span class="o">(</span>extra<span class="o">)</span>:            /home/frankyin/opencv_build/opencv_contrib/modules
   Version control <span class="o">(</span>extra<span class="o">)</span>:     4.10.0-24-g80f1ca24

 Platform:
   Timestamp:                   2024-10-13T14:42:07Z
   Host:                        Linux 6.10.12-100.fc39.x86_64 x86_64
   CMake:                       3.27.7
   CMake generator:             Unix Makefiles
   CMake build tool:            /usr/bin/gmake
   Configuration:               Release
   Algorithm Hint:              ALGO_HINT_ACCURATE

 CPU/HW features:
   Baseline:                    SSE SSE2 SSE3
     requested:                 SSE3
   Dispatched code generation:  SSE4_1 SSE4_2 AVX FP16 AVX2 AVX512_SKX
     SSE4_1 <span class="o">(</span>18 files<span class="o">)</span>:         + SSSE3 SSE4_1
     SSE4_2 <span class="o">(</span>2 files<span class="o">)</span>:          + SSSE3 SSE4_1 POPCNT SSE4_2
     AVX <span class="o">(</span>9 files<span class="o">)</span>:             + SSSE3 SSE4_1 POPCNT SSE4_2 AVX
     FP16 <span class="o">(</span>1 files<span class="o">)</span>:            + SSSE3 SSE4_1 POPCNT SSE4_2 AVX FP16
     AVX2 <span class="o">(</span>38 files<span class="o">)</span>:           + SSSE3 SSE4_1 POPCNT SSE4_2 AVX FP16 AVX2 FMA3
     AVX512_SKX <span class="o">(</span>8 files<span class="o">)</span>:      + SSSE3 SSE4_1 POPCNT SSE4_2 AVX FP16 AVX2 FMA3 AVX_512F AVX512_COMMON AVX512_SKX

 C/C++:
   Built as dynamic libs?:      YES
   C++ standard:                11
   C++ Compiler:                /usr/lib64/ccache/c++  <span class="o">(</span>ver 13.3.1<span class="o">)</span>
   C++ flags <span class="o">(</span>Release<span class="o">)</span>:         <span class="nt">-fsigned-char</span> <span class="nt">-W</span> <span class="nt">-Wall</span> <span class="nt">-Wreturn-type</span> <span class="nt">-Wnon-virtual-dtor</span> <span class="nt">-Waddress</span> <span class="nt">-Wsequence-point</span> <span class="nt">-Wformat</span> <span class="nt">-Wformat-security</span> <span class="nt">-Wmissing-declarations</span> <span class="nt">-Wundef</span> <span class="nt">-Winit-self</span> <span class="nt">-Wpointer-arith</span> <span class="nt">-Wshadow</span> <span class="nt">-Wsign-promo</span> <span class="nt">-Wuninitialized</span> <span class="nt">-Wsuggest-override</span> <span class="nt">-Wno-delete-non-virtual-dtor</span> <span class="nt">-Wno-comment</span> <span class="nt">-Wimplicit-fallthrough</span><span class="o">=</span>3 <span class="nt">-Wno-strict-overflow</span> <span class="nt">-fdiagnostics-show-option</span> <span class="nt">-Wno-long-long</span> <span class="nt">-pthread</span> <span class="nt">-fomit-frame-pointer</span> <span class="nt">-ffunction-sections</span> <span class="nt">-fdata-sections</span>  <span class="nt">-msse3</span> <span class="nt">-fvisibility</span><span class="o">=</span>hidden <span class="nt">-fvisibility-inlines-hidden</span> <span class="nt">-O3</span> <span class="nt">-DNDEBUG</span>  <span class="nt">-DNDEBUG</span>
   C++ flags <span class="o">(</span>Debug<span class="o">)</span>:           <span class="nt">-fsigned-char</span> <span class="nt">-W</span> <span class="nt">-Wall</span> <span class="nt">-Wreturn-type</span> <span class="nt">-Wnon-virtual-dtor</span> <span class="nt">-Waddress</span> <span class="nt">-Wsequence-point</span> <span class="nt">-Wformat</span> <span class="nt">-Wformat-security</span> <span class="nt">-Wmissing-declarations</span> <span class="nt">-Wundef</span> <span class="nt">-Winit-self</span> <span class="nt">-Wpointer-arith</span> <span class="nt">-Wshadow</span> <span class="nt">-Wsign-promo</span> <span class="nt">-Wuninitialized</span> <span class="nt">-Wsuggest-override</span> <span class="nt">-Wno-delete-non-virtual-dtor</span> <span class="nt">-Wno-comment</span> <span class="nt">-Wimplicit-fallthrough</span><span class="o">=</span>3 <span class="nt">-Wno-strict-overflow</span> <span class="nt">-fdiagnostics-show-option</span> <span class="nt">-Wno-long-long</span> <span class="nt">-pthread</span> <span class="nt">-fomit-frame-pointer</span> <span class="nt">-ffunction-sections</span> <span class="nt">-fdata-sections</span>  <span class="nt">-msse3</span> <span class="nt">-fvisibility</span><span class="o">=</span>hidden <span class="nt">-fvisibility-inlines-hidden</span> <span class="nt">-g</span>  <span class="nt">-O0</span> <span class="nt">-DDEBUG</span> <span class="nt">-D_DEBUG</span>
   C Compiler:                  /usr/lib64/ccache/cc
   C flags <span class="o">(</span>Release<span class="o">)</span>:           <span class="nt">-fsigned-char</span> <span class="nt">-W</span> <span class="nt">-Wall</span> <span class="nt">-Wreturn-type</span> <span class="nt">-Waddress</span> <span class="nt">-Wsequence-point</span> <span class="nt">-Wformat</span> <span class="nt">-Wformat-security</span> <span class="nt">-Wmissing-declarations</span> <span class="nt">-Wmissing-prototypes</span> <span class="nt">-Wstrict-prototypes</span> <span class="nt">-Wundef</span> <span class="nt">-Winit-self</span> <span class="nt">-Wpointer-arith</span> <span class="nt">-Wshadow</span> <span class="nt">-Wuninitialized</span> <span class="nt">-Wno-comment</span> <span class="nt">-Wimplicit-fallthrough</span><span class="o">=</span>3 <span class="nt">-Wno-strict-overflow</span> <span class="nt">-fdiagnostics-show-option</span> <span class="nt">-Wno-long-long</span> <span class="nt">-pthread</span> <span class="nt">-fomit-frame-pointer</span> <span class="nt">-ffunction-sections</span> <span class="nt">-fdata-sections</span>  <span class="nt">-msse3</span> <span class="nt">-fvisibility</span><span class="o">=</span>hidden <span class="nt">-O3</span> <span class="nt">-DNDEBUG</span>  <span class="nt">-DNDEBUG</span>
   C flags <span class="o">(</span>Debug<span class="o">)</span>:             <span class="nt">-fsigned-char</span> <span class="nt">-W</span> <span class="nt">-Wall</span> <span class="nt">-Wreturn-type</span> <span class="nt">-Waddress</span> <span class="nt">-Wsequence-point</span> <span class="nt">-Wformat</span> <span class="nt">-Wformat-security</span> <span class="nt">-Wmissing-declarations</span> <span class="nt">-Wmissing-prototypes</span> <span class="nt">-Wstrict-prototypes</span> <span class="nt">-Wundef</span> <span class="nt">-Winit-self</span> <span class="nt">-Wpointer-arith</span> <span class="nt">-Wshadow</span> <span class="nt">-Wuninitialized</span> <span class="nt">-Wno-comment</span> <span class="nt">-Wimplicit-fallthrough</span><span class="o">=</span>3 <span class="nt">-Wno-strict-overflow</span> <span class="nt">-fdiagnostics-show-option</span> <span class="nt">-Wno-long-long</span> <span class="nt">-pthread</span> <span class="nt">-fomit-frame-pointer</span> <span class="nt">-ffunction-sections</span> <span class="nt">-fdata-sections</span>  <span class="nt">-msse3</span> <span class="nt">-fvisibility</span><span class="o">=</span>hidden <span class="nt">-g</span>  <span class="nt">-O0</span> <span class="nt">-DDEBUG</span> <span class="nt">-D_DEBUG</span>
   Linker flags <span class="o">(</span>Release<span class="o">)</span>:      <span class="nt">-Wl</span>,--exclude-libs,libippicv.a <span class="nt">-Wl</span>,--exclude-libs,libippiw.a   <span class="nt">-Wl</span>,--gc-sections <span class="nt">-Wl</span>,--as-needed <span class="nt">-Wl</span>,--no-undefined
   Linker flags <span class="o">(</span>Debug<span class="o">)</span>:        <span class="nt">-Wl</span>,--exclude-libs,libippicv.a <span class="nt">-Wl</span>,--exclude-libs,libippiw.a   <span class="nt">-Wl</span>,--gc-sections <span class="nt">-Wl</span>,--as-needed <span class="nt">-Wl</span>,--no-undefined
   ccache:                      YES
   Precompiled headers:         NO
   Extra dependencies:          /usr/local/cuda/lib64/libcudart_static.a /usr/local/cuda/lib64/libnppial.so /usr/local/cuda/lib64/libnppc.so /usr/local/cuda/lib64/libnppitc.so /usr/local/cuda/lib64/libnppig.so /usr/local/cuda/lib64/libnppist.so /usr/local/cuda/lib64/libnppidei.so /usr/local/cuda/lib64/libcublas.so /usr/local/cuda-12.6/targets/x86_64-linux/lib/libcublasLt.so /usr/local/cuda/lib64/libcufft.so /usr/local/cuda/lib64/libnppif.so /usr/local/cuda/lib64/libnppim.so /usr/local/cuda/lib64/libnppicc.so dl m pthread rt
   3rdparty dependencies:

 OpenCV modules:
   To be built:                 alphamat aruco bgsegm bioinspired calib3d ccalib core cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev datasets dnn dnn_objdetect dnn_superres dpm face features2d flann freetype fuzzy gapi hfs highgui img_hash imgcodecs imgproc intensity_transform line_descriptor mcc ml objdetect optflow phase_unwrapping photo plot python3 quality rapid reg rgbd saliency sfm shape signal stereo stitching structured_light superres surface_matching text tracking ts video videoio videostab wechat_qrcode world xfeatures2d ximgproc xobjdetect xphoto
   Disabled:                    java_bindings_generator js_bindings_generator
   Disabled by dependency:      -
   Unavailable:                 cannops cvv hdf java julia matlab ovis python2 python2 viz
   Applications:                tests perf_tests apps
   Documentation:               NO
   Non-free algorithms:         NO

 GUI:
   GTK+:                        YES <span class="o">(</span>ver 3.24.43<span class="o">)</span>
   OpenGL support:              YES <span class="o">(</span>/usr/lib64/libGL.so /usr/lib64/libGLU.so<span class="o">)</span>
   VTK support:                 NO

 Media I/O:
   ZLib:                        build <span class="o">(</span>ver 1.3.1<span class="o">)</span>
   JPEG:                        build-libjpeg-turbo <span class="o">(</span>ver 3.0.3-70<span class="o">)</span>
     SIMD Support Request:      YES
     SIMD Support:              YES
   WEBP:                        build <span class="o">(</span>ver encoder: 0x020f<span class="o">)</span>
   PNG:                         build <span class="o">(</span>ver 1.6.43<span class="o">)</span>
     SIMD Support Request:      YES
     SIMD Support:              YES <span class="o">(</span>Intel SSE<span class="o">)</span>
   TIFF:                        build <span class="o">(</span>ver 42 - 4.6.0<span class="o">)</span>
   JPEG 2000:                   build <span class="o">(</span>ver 2.5.0<span class="o">)</span>
   OpenEXR:                     build <span class="o">(</span>ver 2.3.0<span class="o">)</span>
   HDR:                         YES
   SUNRASTER:                   YES
   PXM:                         YES
   PFM:                         YES

 Video I/O:
   FFMPEG:                      YES
     avcodec:                   YES <span class="o">(</span>60.31.102<span class="o">)</span>
     avformat:                  YES <span class="o">(</span>60.16.100<span class="o">)</span>
     avutil:                    YES <span class="o">(</span>58.29.100<span class="o">)</span>
     swscale:                   YES <span class="o">(</span>7.5.100<span class="o">)</span>
     avresample:                NO
   GStreamer:                   NO
   v4l/v4l2:                    YES <span class="o">(</span>linux/videodev2.h<span class="o">)</span>

 Parallel framework:            pthreads

 Trace:                         YES <span class="o">(</span>with Intel ITT<span class="o">)</span>

 Other third-party libraries:
   Intel IPP:                   2021.12.0 <span class="o">[</span>2021.12.0]
          at:                   /home/frankyin/opencv_build/opencv/build/3rdparty/ippicv/ippicv_lnx/icv
   Intel IPP IW:                sources <span class="o">(</span>2021.12.0<span class="o">)</span>
             at:                /home/frankyin/opencv_build/opencv/build/3rdparty/ippicv/ippicv_lnx/iw
   VA:                          NO
   Lapack:                      YES <span class="o">(</span>/lib64/libopenblas.so<span class="o">)</span>
   Eigen:                       YES <span class="o">(</span>ver 3.4.0<span class="o">)</span>
   Custom HAL:                  NO
   Protobuf:                    build <span class="o">(</span>3.19.1<span class="o">)</span>
   Flatbuffers:                 <span class="nb">builtin</span>/3rdparty <span class="o">(</span>23.5.9<span class="o">)</span>

 NVIDIA CUDA:                   YES <span class="o">(</span>ver 12.6.77, CUFFT CUBLAS NVCUVID NVCUVENC<span class="o">)</span>
   NVIDIA GPU <span class="nb">arch</span>:             90
   NVIDIA PTX archs:

 cuDNN:                         YES <span class="o">(</span>ver 9.5.0<span class="o">)</span>

 Vulkan:                        YES
   Include path:                /home/frankyin/opencv_build/opencv/3rdparty/include
   Link libraries:              Dynamic load

 OpenCL:                        YES <span class="o">(</span>no extra features<span class="o">)</span>
   Include path:                /home/frankyin/opencv_build/opencv/3rdparty/include/opencl/1.2
   Link libraries:              Dynamic load

 Python 3:
   Interpreter:                 /usr/bin/python3 <span class="o">(</span>ver 3.12.6<span class="o">)</span>
   Libraries:                   /usr/lib64/libpython3.12.so <span class="o">(</span>ver 3.12.6<span class="o">)</span>
   Limited API:                 NO
   numpy:                       /home/frankyin/.local/lib/python3.12/site-packages/numpy/_core/include <span class="o">(</span>ver 2.1.2<span class="o">)</span>
   <span class="nb">install </span>path:                lib/python3.12/site-packages/cv2/python-3.12

 Python <span class="o">(</span><span class="k">for </span>build<span class="o">)</span>:            /usr/bin/python3

 Install to:                    /usr/local
<span class="nt">-----------------------------------------------------------------</span>
</code></pre></div> </div> </blockquote>]]></content><author><name></name></author><category term="Tech"/><category term="OpenCV"/><category term="CUDA"/><category term="cuDNN"/><category term="GAPI"/><category term="Fedora"/><summary type="html"><![CDATA[A step-by-step guide to building OpenCV from source with advanced features]]></summary></entry><entry><title type="html">Car Fleet Problem</title><link href="https://qervas.github.io/blog/2024/lc-853-car-fleet/" rel="alternate" type="text/html" title="Car Fleet Problem"/><published>2024-06-25T12:01:00+00:00</published><updated>2024-06-25T12:01:00+00:00</updated><id>https://qervas.github.io/blog/2024/lc-853-car-fleet</id><content type="html" xml:base="https://qervas.github.io/blog/2024/lc-853-car-fleet/"><![CDATA[<blockquote> <p><a href="https://leetcode.com/problems/car-fleet/description/">Leetcode 853</a></p> </blockquote> <h3 id="problem-overview">Problem Overview</h3> <p>The problem requires determining how many car fleets will arrive at a destination given the starting positions and speeds of the cars. A car fleet is a group of cars that travel together at the same speed due to the leading car.</p> <h3 id="initial-analysis">Initial Analysis</h3> <p>Initially, I considered using a hash table to manage the positions and speeds of the cars. Here’s how I thought it might work:</p> <ul> <li><strong>Buckets for Positions</strong>: Using an unordered_map, each car’s position would be a key, and the speed would be the value.</li> <li><strong>Collision Detection</strong>: At each time tick, update the car positions. If two cars share a position, merge them into a fleet and adjust the speed.</li> <li><strong>Complexity Concerns</strong>: Continuously updating positions and merging fleets seemed computationally expensive, especially with large inputs.</li> </ul> <p>While the hash table approach appeared promising due to its average O(1) complexity for insertions and lookups, the dynamic nature of updating positions and merging fleets introduced high overhead. This realization led me to explore more efficient solutions.</p> <h3 id="transition-to-a-stack-based-approach">Transition to a Stack-Based Approach</h3> <p>Recognizing the potential inefficiencies of the hash table method, I shifted to a more straightforward and efficient stack-based approach. This method leverages sorting and a single pass through the list of cars to manage fleets.</p> <h3 id="detailed-solution">Detailed Solution</h3> <ol> <li> <p><strong>Calculate Time to Target</strong>: For each car, compute the time it will take to reach the target using:</p> \[\text{time} = \frac{\text{target} - \text{position[i]}}{\text{speed[i]}}\] </li> <li><strong>Sort Cars by Position</strong>: Sort the cars based on their starting positions in descending order. This allows us to process the farthest car first.</li> <li> <p><strong>Use a Stack to Track Fleets</strong>:</p> <ul> <li>Initialize a stack to keep track of the maximum time of the current fleet to reach the target.</li> <li>Iterate through the sorted list of cars: <ul> <li>If a car’s time to target is greater than the current maximum (top of the stack), it forms a new fleet.</li> <li>If a car can catch up to the fleet in front, it joins that fleet.</li> </ul> </li> </ul> </li> </ol> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//to be noticed, time is a real number not an integer</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">carFleet</span><span class="p">(</span><span class="kt">int</span> <span class="n">target</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">position</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">speed</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">assert</span><span class="p">(</span><span class="n">position</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">speed</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="s">"These 2 containers should be the same size."</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">position</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span><span class="k">return</span> <span class="mi">1</span><span class="p">;}</span>

        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">time</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">position</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="n">time</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">position</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">/</span> <span class="n">speed</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="k">auto</span> <span class="n">comparator</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">){</span>
            <span class="k">return</span> <span class="n">position</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">position</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
        <span class="p">};</span>

        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">indices</span><span class="p">(</span><span class="n">position</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
        <span class="n">iota</span><span class="p">(</span><span class="n">indices</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">indices</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">indices</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">indices</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">comparator</span><span class="p">);</span>

        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;&gt;</span> <span class="n">cars</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">position</span><span class="p">.</span><span class="n">size</span><span class="p">()));</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">position</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="n">cars</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">position</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="n">i</span><span class="p">]]);</span>
            <span class="n">cars</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">time</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>  
        <span class="p">}</span>
  
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">{};</span>
        <span class="n">stack</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cars</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cars</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cars</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">stack</span><span class="p">.</span><span class="n">back</span><span class="p">()){</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cars</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]);</span>
            <span class="p">}</span>
        <span class="p">}</span>  

        <span class="k">return</span> <span class="n">stack</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="conclusion">Conclusion</h3> <p>This approach effectively reduces complexity by leveraging sorting and a stack to manage the fleets. The result is an efficient algorithm with a time complexity of $O(n log n)$ due to sorting and $O(n)$ for the single pass through the cars.</p> <p>The process of transitioning from the hash table idea to the stack-based solution was a valuable learning experience. It underscored the importance of evaluating algorithm efficiency and adapting strategies to optimize performance.</p>]]></content><author><name></name></author><category term="Tech"/><category term="LeetCode"/><summary type="html"><![CDATA[Car Fleet problem analysis and solution]]></summary></entry><entry><title type="html">C++ templates (1)</title><link href="https://qervas.github.io/blog/2024/cpp_templates_1/" rel="alternate" type="text/html" title="C++ templates (1)"/><published>2024-01-22T17:02:00+00:00</published><updated>2024-01-22T17:02:00+00:00</updated><id>https://qervas.github.io/blog/2024/cpp_templates_1</id><content type="html" xml:base="https://qervas.github.io/blog/2024/cpp_templates_1/"><![CDATA[<h1 id="parameter-packs-1">Parameter Packs 1</h1> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span><span class="o">...</span> <span class="nc">Ts</span><span class="p">&gt;</span>
<span class="k">constexpr</span> <span class="k">auto</span> <span class="nf">get_type_sizes</span><span class="p">(){</span>
	<span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="kt">size_t</span><span class="p">,</span> 	<span class="k">sizeof</span><span class="p">...(</span><span class="n">Ts</span><span class="p">)</span><span class="o">&gt;</span><span class="p">{</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Ts</span><span class="p">)...};</span>
<span class="p">}</span>

<span class="k">auto</span> <span class="n">sizes</span> <span class="o">=</span> <span class="n">get_type_sizes</span><span class="o">&lt;</span><span class="kt">short</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">long</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span><span class="p">();</span>
</code></pre></div></div> <ul> <li>What’s the <code class="language-plaintext highlighter-rouge">sizeof</code> going on here? <ul> <li> <blockquote> <p><code class="language-plaintext highlighter-rouge">sizeof…(Ts)</code> evaluates how many arguments in the parameter packs, 4 in this case.</p> </blockquote> </li> <li> <blockquote> <p><code class="language-plaintext highlighter-rouge">sizeof(Ts)...</code>expands into a comma-seperated sequence as <code class="language-plaintext highlighter-rouge">sizeof(short), sizeof(int), sizeof(long), sizeof(long long)</code>, a number sequence.</p> </blockquote> </li> </ul> </li> </ul> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span><span class="o">...</span> <span class="nc">Ts</span><span class="p">,</span> <span class="k">typename</span><span class="o">...</span> <span class="nc">Us</span><span class="p">&gt;</span>
<span class="k">constexpr</span> <span class="k">auto</span> <span class="nf">multipacks</span><span class="p">(</span><span class="n">Ts</span><span class="p">...</span> <span class="n">args1</span><span class="p">,</span> <span class="n">Us</span><span class="p">...</span> <span class="n">args2</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">...(</span><span class="n">args1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">','</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">...(</span><span class="n">args2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">multipacks</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span><span class="c1">// 1,5</span>
<span class="n">multipacks</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span><span class="c1">// 3,3</span>
<span class="n">multipacks</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span><span class="c1">// 4,2</span>
<span class="n">multipacks</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span> <span class="c1">// 6,0</span>
</code></pre></div></div> <ul> <li>A parameter pack can be followed by other parameters including more parameter packs. First group of function parameters match template parameters one by one as <code class="language-plaintext highlighter-rouge">Ts... args1</code>, the remainings are <code class="language-plaintext highlighter-rouge">Us... args2</code>.</li> </ul> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;functional&gt;</span><span class="cp">
</span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span><span class="p">,</span> <span class="k">typename</span><span class="p">&gt;</span>
<span class="k">struct</span> <span class="nc">func_pair</span><span class="p">;</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">R1</span><span class="p">,</span> <span class="k">typename</span><span class="o">...</span> <span class="nc">A1</span><span class="p">,</span> <span class="k">typename</span> <span class="nc">R2</span><span class="p">,</span> <span class="k">typename</span><span class="o">...</span> <span class="nc">A2</span><span class="p">&gt;</span>
<span class="k">struct</span> <span class="nc">func_pair</span><span class="o">&lt;</span><span class="n">R1</span><span class="p">(</span><span class="n">A1</span><span class="p">...),</span> <span class="n">R2</span><span class="p">(</span><span class="n">A2</span><span class="p">...)</span><span class="o">&gt;</span><span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="n">R1</span><span class="p">(</span><span class="n">A1</span><span class="p">...)</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="n">R2</span><span class="p">(</span><span class="n">A2</span><span class="p">...)</span><span class="o">&gt;</span> <span class="n">g</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">bool</span> <span class="nf">twice_as</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
	<span class="k">return</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="n">b</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">double</span> <span class="nf">sum_and_div</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">double</span> <span class="n">c</span><span class="p">){</span>
	<span class="k">return</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">/</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="n">func_pair</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">),</span> <span class="kt">double</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">double</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">funcs</span><span class="p">{</span><span class="n">twice_as</span><span class="p">,</span> <span class="n">sum_and_div</span> <span class="p">};</span>
	<span class="n">funcs</span><span class="p">.</span><span class="n">f</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>
	<span class="n">funcs</span><span class="p">.</span><span class="n">g</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">);</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>a class template that represents a pair of function pointers.</li> </ul> <h2 id="reference">Reference</h2> <p><a href="https://www.amazon.com/Template-Metaprogramming-everything-templates-metaprogramming-ebook/dp/B09ZHZFTKV">Template Metaprogramming with C++</a>: Learn everything about C++ templates and unlock the power of template metaprogramming - by <a href="https://www.amazon.com/Marius-Bancila/e/B07D8WMX23/ref=dp_byline_cont_ebooks_1">Marius Bancila</a> <strong>(Author)</strong></p>]]></content><author><name></name></author><category term="Tech"/><category term="C++"/><summary type="html"><![CDATA[Parameter packs]]></summary></entry><entry><title type="html">OpenGL Perspective Matrix</title><link href="https://qervas.github.io/blog/2024/perspective-matrix/" rel="alternate" type="text/html" title="OpenGL Perspective Matrix"/><published>2024-01-20T22:01:00+00:00</published><updated>2024-01-20T22:01:00+00:00</updated><id>https://qervas.github.io/blog/2024/perspective-matrix</id><content type="html" xml:base="https://qervas.github.io/blog/2024/perspective-matrix/"><![CDATA[<p>On the learning 3D compute graphics for initial lab. I come into a problem. It’s about near/far plane. When I adding more planets into the 3D solar system, some of them were culling for out of the perspective world.</p> <p>Thus, I want to make some changes on the given perspective matrix $P$, which represents a matrix with d=4, near=3, far=7 and aspect=1.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">GLfloat</span> <span class="n">P</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mf">4.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>  <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>
		   <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">4.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>   <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>
                   <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.5</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span>
		   <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">10.5</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">};</span>

</code></pre></div></div> <p>I don’t know the meaning of each digits. From <strong><a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/opengl-perspective-projection-matrix.html">this article</a></strong>, it demonstrates the maths principles behind it. Took me minutes reading it, And now I could construct a matrix with some variables which make it easier to control the whole perspective projection.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">GLfloat</span> <span class="n">fov</span> <span class="o">=</span> <span class="mf">60.</span><span class="n">f</span> <span class="o">*</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="mf">180.0</span><span class="n">f</span><span class="p">;</span>  <span class="c1">// Convert to radians</span>
	<span class="n">GLfloat</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">1.0</span><span class="n">f</span> <span class="o">/</span> <span class="n">tan</span><span class="p">(</span><span class="n">fov</span> <span class="o">/</span> <span class="mf">2.0</span><span class="n">f</span><span class="p">);</span>
	<span class="n">GLfloat</span> <span class="n">aspect</span> <span class="o">=</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">;</span>  <span class="c1">// Assuming a square viewport</span>
	<span class="n">GLfloat</span> <span class="n">near</span> <span class="o">=</span> <span class="mf">0.01</span><span class="n">f</span><span class="p">;</span>
	<span class="n">GLfloat</span> <span class="n">far</span> <span class="o">=</span> <span class="mf">15.0</span><span class="n">f</span><span class="p">;</span>

	<span class="n">GLfloat</span> <span class="n">P</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
	    <span class="n">f</span> <span class="o">/</span> <span class="n">aspect</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>                            <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>
	    <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>       <span class="n">f</span><span class="p">,</span>    <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>                            <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>
	    <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>       <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="p">(</span><span class="n">far</span> <span class="o">+</span> <span class="n">near</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">near</span> <span class="o">-</span> <span class="n">far</span><span class="p">),</span>    <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">,</span>
	    <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>       <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">far</span> <span class="o">*</span> <span class="n">near</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">near</span> <span class="o">-</span> <span class="n">far</span><span class="p">),</span> <span class="mf">0.0</span><span class="n">f</span>
	<span class="p">};</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/date/Jan_20_2024/solar-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/date/Jan_20_2024/solar-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/date/Jan_20_2024/solar-1400.webp"/> <img src="/assets/img/date/Jan_20_2024/solar.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="Tech"/><category term="graphics"/><summary type="html"><![CDATA[perspective matrix]]></summary></entry></feed>