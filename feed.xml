<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://qervas.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://qervas.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-09T08:44:28+00:00</updated><id>https://qervas.github.io/feed.xml</id><title type="html">Frank Yin</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Car Fleet Problem</title><link href="https://qervas.github.io/blog/2024/lc-853-car-fleet/" rel="alternate" type="text/html" title="Car Fleet Problem"/><published>2024-06-25T12:01:00+00:00</published><updated>2024-06-25T12:01:00+00:00</updated><id>https://qervas.github.io/blog/2024/lc-853-car-fleet</id><content type="html" xml:base="https://qervas.github.io/blog/2024/lc-853-car-fleet/"><![CDATA[<blockquote> <p><a href="https://leetcode.com/problems/car-fleet/description/">Leetcode 853</a></p> </blockquote> <h3 id="problem-overview">Problem Overview</h3> <p>The problem requires determining how many car fleets will arrive at a destination given the starting positions and speeds of the cars. A car fleet is a group of cars that travel together at the same speed due to the leading car.</p> <h3 id="initial-analysis">Initial Analysis</h3> <p>Initially, I considered using a hash table to manage the positions and speeds of the cars. Here’s how I thought it might work:</p> <ul> <li><strong>Buckets for Positions</strong>: Using an unordered_map, each car’s position would be a key, and the speed would be the value.</li> <li><strong>Collision Detection</strong>: At each time tick, update the car positions. If two cars share a position, merge them into a fleet and adjust the speed.</li> <li><strong>Complexity Concerns</strong>: Continuously updating positions and merging fleets seemed computationally expensive, especially with large inputs.</li> </ul> <p>While the hash table approach appeared promising due to its average O(1) complexity for insertions and lookups, the dynamic nature of updating positions and merging fleets introduced high overhead. This realization led me to explore more efficient solutions.</p> <h3 id="transition-to-a-stack-based-approach">Transition to a Stack-Based Approach</h3> <p>Recognizing the potential inefficiencies of the hash table method, I shifted to a more straightforward and efficient stack-based approach. This method leverages sorting and a single pass through the list of cars to manage fleets.</p> <h3 id="detailed-solution">Detailed Solution</h3> <ol> <li> <p><strong>Calculate Time to Target</strong>: For each car, compute the time it will take to reach the target using:</p> \[\text{time} = \frac{\text{target} - \text{position[i]}}{\text{speed[i]}}\] </li> <li><strong>Sort Cars by Position</strong>: Sort the cars based on their starting positions in descending order. This allows us to process the farthest car first.</li> <li> <p><strong>Use a Stack to Track Fleets</strong>:</p> <ul> <li>Initialize a stack to keep track of the maximum time of the current fleet to reach the target.</li> <li>Iterate through the sorted list of cars: <ul> <li>If a car’s time to target is greater than the current maximum (top of the stack), it forms a new fleet.</li> <li>If a car can catch up to the fleet in front, it joins that fleet.</li> </ul> </li> </ul> </li> </ol> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//to be noticed, time is a real number not an integer</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">carFleet</span><span class="p">(</span><span class="kt">int</span> <span class="n">target</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">position</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">speed</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">assert</span><span class="p">(</span><span class="n">position</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">speed</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="s">"These 2 containers should be the same size."</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">position</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span><span class="k">return</span> <span class="mi">1</span><span class="p">;}</span>

        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">time</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">position</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="n">time</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">position</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">/</span> <span class="n">speed</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="k">auto</span> <span class="n">comparator</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">){</span>
            <span class="k">return</span> <span class="n">position</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">position</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
        <span class="p">};</span>

        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">indices</span><span class="p">(</span><span class="n">position</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
        <span class="n">iota</span><span class="p">(</span><span class="n">indices</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">indices</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">indices</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">indices</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">comparator</span><span class="p">);</span>

        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;&gt;</span> <span class="n">cars</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">position</span><span class="p">.</span><span class="n">size</span><span class="p">()));</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">position</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="n">cars</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">position</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="n">i</span><span class="p">]]);</span>
            <span class="n">cars</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">time</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>  
        <span class="p">}</span>
  
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">{};</span>
        <span class="n">stack</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cars</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cars</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cars</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">stack</span><span class="p">.</span><span class="n">back</span><span class="p">()){</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cars</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]);</span>
            <span class="p">}</span>
        <span class="p">}</span>  

        <span class="k">return</span> <span class="n">stack</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="conclusion">Conclusion</h3> <p>This approach effectively reduces complexity by leveraging sorting and a stack to manage the fleets. The result is an efficient algorithm with a time complexity of $O(n log n)$ due to sorting and $O(n)$ for the single pass through the cars.</p> <p>The process of transitioning from the hash table idea to the stack-based solution was a valuable learning experience. It underscored the importance of evaluating algorithm efficiency and adapting strategies to optimize performance.</p>]]></content><author><name></name></author><category term="Tech"/><category term="LeetCode"/><summary type="html"><![CDATA[Car Fleet problem analysis and solution]]></summary></entry><entry><title type="html">NexusPlay DevLog</title><link href="https://qervas.github.io/blog/2024/nexusplay_devlog/" rel="alternate" type="text/html" title="NexusPlay DevLog"/><published>2024-04-02T04:07:00+00:00</published><updated>2024-04-02T04:07:00+00:00</updated><id>https://qervas.github.io/blog/2024/nexusplay_devlog</id><content type="html" xml:base="https://qervas.github.io/blog/2024/nexusplay_devlog/"><![CDATA[<h3 id="web-application-development-log">Web Application Development Log</h3> <table> <thead> <tr> <th><strong>Date</strong></th> <th><strong>Developer(s)</strong></th> <th><strong>Version</strong></th> <th><strong>Objectives for the Day</strong></th> <th><strong>Tasks Completed</strong></th> <th><strong>Code Committed</strong></th> <th><strong>Challenges Encountered</strong></th> <th><strong>Solutions/Workarounds</strong></th> <th><strong>New Knowledge Acquired</strong></th> <th><strong>Insights</strong></th> <th><strong>Plans for Tomorrow</strong></th> <th><strong>Pending Tasks</strong></th> <th><strong>Feedback Received</strong></th> <th><strong>Adjustments to Plan/Strategy</strong></th> <th><strong>Miscellaneous Notes</strong></th> </tr> </thead> <tbody> <tr> <td><strong>Apr-2-2024</strong></td> <td>FrankYin</td> <td>0.01</td> <td><strong>- Objective 1</strong> <strong>- Objective 2</strong></td> <td><strong>- Task 1</strong> <strong>- Task 2</strong></td> <td><strong>Yes/No</strong></td> <td><strong>- Challenge 1</strong> <strong>- Challenge 2</strong></td> <td><strong>- Solution 1</strong> <strong>- Workaround for Challenge 2</strong></td> <td><strong>- Concept/Tool learned</strong></td> <td><strong>- Insight 1</strong> <strong>- Insight 2</strong></td> <td><strong>- Goal 1 for tomorrow</strong> <strong>- Goal 2 for tomorrow</strong></td> <td><strong>- Task 1</strong> <strong>- Task 2</strong></td> <td><strong>- Feedback 1</strong> <strong>- Feedback 2</strong></td> <td><strong>- Adjustment 1</strong> <strong>- Adjustment 2</strong></td> <td><strong>- Note 1</strong> <strong>- Note 2</strong></td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="Tech"/><category term="Web"/><summary type="html"><![CDATA[An Interactive Game Hub]]></summary></entry><entry><title type="html">NexusPlay Project Proposal</title><link href="https://qervas.github.io/blog/2024/nexusplay-proposal/" rel="alternate" type="text/html" title="NexusPlay Project Proposal"/><published>2024-04-01T15:23:00+00:00</published><updated>2024-04-01T15:23:00+00:00</updated><id>https://qervas.github.io/blog/2024/nexusplay-proposal</id><content type="html" xml:base="https://qervas.github.io/blog/2024/nexusplay-proposal/"><![CDATA[<h2 id="project-overview">Project Overview</h2> <p><strong>This proposal outlines the development of an online game hub featuring a multiplayer shooter game. The platform will incorporate a chat room, user authentication, friend system, and game lobbies. This document specifies the technical approach, focusing on creating a robust, interactive web application using modern web technologies.</strong></p> <h2 id="technical-specifications">Technical Specifications</h2> <h3 id="core-features">Core Features</h3> <ul> <li><strong>User Authentication</strong>: Secure login functionality using Google and Apple accounts.</li> <li><strong>Chat Room</strong>: Real-time communication features with different channels (World, Friends, Lobby) for users to interact.</li> <li><strong>Friend System</strong>: Ability for users to add friends and manage their friend list.</li> <li><strong>Game Lobbies</strong>: Users can create temporary lobbies for playing games or for matchmaking purposes.</li> <li><strong>Online Multiplayer Game</strong>: A shooter game where players can join lobbies to play. The game will support reconnection in case of dropout.</li> </ul> <h3 id="tech-stack">Tech Stack</h3> <h4 id="frontend">Frontend</h4> <ul> <li><strong>Framework</strong>: React with Next.js - This combination provides a powerful, efficient framework for building user interfaces with server-side rendering capabilities for improved performance and SEO.</li> <li><strong>Language</strong>: TypeScript - Offers type safety, enhancing code quality and maintainability.</li> <li><strong>Real-Time Communication</strong>: Socket.IO - For implementing real-time chat functionality and live updates within the game.</li> <li><strong>Game Development</strong>: Three.js - For rendering 3D graphics in the web browser, to be used in the development of the multiplayer shooter game.</li> </ul> <h4 id="backend">Backend</h4> <ul> <li><strong>Server Framework</strong>: Express.js - A minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.</li> <li><strong>Database</strong>: MongoDB - A NoSQL database ideal for handling dynamic data and real-time updates, which will be used to store user profiles, chat messages, and game data.</li> </ul> <h4 id="authentication">Authentication</h4> <ul> <li><strong>OAuth 2.0</strong>: Integration of Google and Apple Sign-In for secure authentication, leveraging libraries such as Passport.js to streamline the authentication process on the backend.</li> </ul> <h3 id="development-phases">Development Phases</h3> <h4 id="phase-1-user-authentication-and-chat-room">Phase 1: User Authentication and Chat Room</h4> <ol> <li><strong>User Authentication</strong>: Implement OAuth 2.0 authentication with Google and Apple, ensuring secure and convenient user login.</li> <li><strong>Chat Room Setup</strong>: Develop the real-time chat functionality using Socket.IO, allowing users to communicate in different channels: World, Friends, Lobby.</li> <li><strong>Database Integration</strong>: Set up MongoDB to store user data, friend lists, and chat messages.</li> </ol> <h4 id="phase-2-friend-system-and-game-lobbies">Phase 2: Friend System and Game Lobbies</h4> <ol> <li><strong>Friend System</strong>: Enable users to send and accept friend requests, view their friend list, and manage friendships.</li> <li><strong>Lobby Creation</strong>: Allow users to create and join temporary lobbies for social interaction or for preparing to play games together.</li> </ol> <h4 id="phase-3-online-multiplayer-game">Phase 3: Online Multiplayer Game</h4> <ol> <li><strong>Game Development</strong>: Utilize Three.js for developing the 3D multiplayer shooter game, focusing on gameplay mechanics, character controls, and graphics rendering.</li> <li><strong>Matchmaking and Gameplay</strong>: Implement game lobbies and matchmaking logic, ensuring players can join games and play with or against friends.</li> <li><strong>Reconnection Logic</strong>: Develop a robust system to handle user reconnections, preserving game state and ensuring a seamless experience for users who experience temporary network issues.</li> </ol> <p>By leveraging modern web technologies such as React, Next.js, TypeScript, Express.js, MongoDB, Socket.IO, and Three.js, the project aims to deliver a high-quality, interactive web application that meets the course’s rigorous requirements and provides a unique platform for gamers to connect and play.</p>]]></content><author><name></name></author><category term="Tech"/><category term="Web"/><summary type="html"><![CDATA[An Interactive Game Hub]]></summary></entry><entry><title type="html">C++ templates (1)</title><link href="https://qervas.github.io/blog/2024/cpp_templates_1/" rel="alternate" type="text/html" title="C++ templates (1)"/><published>2024-01-22T17:02:00+00:00</published><updated>2024-01-22T17:02:00+00:00</updated><id>https://qervas.github.io/blog/2024/cpp_templates_1</id><content type="html" xml:base="https://qervas.github.io/blog/2024/cpp_templates_1/"><![CDATA[<h1 id="parameter-packs-1">Parameter Packs 1</h1> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span><span class="o">...</span> <span class="nc">Ts</span><span class="p">&gt;</span>
<span class="k">constexpr</span> <span class="k">auto</span> <span class="nf">get_type_sizes</span><span class="p">(){</span>
	<span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="kt">size_t</span><span class="p">,</span> 	<span class="k">sizeof</span><span class="p">...(</span><span class="n">Ts</span><span class="p">)</span><span class="o">&gt;</span><span class="p">{</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Ts</span><span class="p">)...};</span>
<span class="p">}</span>

<span class="k">auto</span> <span class="n">sizes</span> <span class="o">=</span> <span class="n">get_type_sizes</span><span class="o">&lt;</span><span class="kt">short</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">long</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span><span class="p">();</span>
</code></pre></div></div> <ul> <li>What’s the <code class="language-plaintext highlighter-rouge">sizeof</code> going on here? <ul> <li> <blockquote> <p><code class="language-plaintext highlighter-rouge">sizeof…(Ts)</code> evaluates how many arguments in the parameter packs, 4 in this case.</p> </blockquote> </li> <li> <blockquote> <p><code class="language-plaintext highlighter-rouge">sizeof(Ts)...</code>expands into a comma-seperated sequence as <code class="language-plaintext highlighter-rouge">sizeof(short), sizeof(int), sizeof(long), sizeof(long long)</code>, a number sequence.</p> </blockquote> </li> </ul> </li> </ul> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span><span class="o">...</span> <span class="nc">Ts</span><span class="p">,</span> <span class="k">typename</span><span class="o">...</span> <span class="nc">Us</span><span class="p">&gt;</span>
<span class="k">constexpr</span> <span class="k">auto</span> <span class="nf">multipacks</span><span class="p">(</span><span class="n">Ts</span><span class="p">...</span> <span class="n">args1</span><span class="p">,</span> <span class="n">Us</span><span class="p">...</span> <span class="n">args2</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">...(</span><span class="n">args1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">','</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">...(</span><span class="n">args2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">multipacks</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span><span class="c1">// 1,5</span>
<span class="n">multipacks</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span><span class="c1">// 3,3</span>
<span class="n">multipacks</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span><span class="c1">// 4,2</span>
<span class="n">multipacks</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span> <span class="c1">// 6,0</span>
</code></pre></div></div> <ul> <li>A parameter pack can be followed by other parameters including more parameter packs. First group of function parameters match template parameters one by one as <code class="language-plaintext highlighter-rouge">Ts... args1</code>, the remainings are <code class="language-plaintext highlighter-rouge">Us... args2</code>.</li> </ul> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;functional&gt;</span><span class="cp">
</span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span><span class="p">,</span> <span class="k">typename</span><span class="p">&gt;</span>
<span class="k">struct</span> <span class="nc">func_pair</span><span class="p">;</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">R1</span><span class="p">,</span> <span class="k">typename</span><span class="o">...</span> <span class="nc">A1</span><span class="p">,</span> <span class="k">typename</span> <span class="nc">R2</span><span class="p">,</span> <span class="k">typename</span><span class="o">...</span> <span class="nc">A2</span><span class="p">&gt;</span>
<span class="k">struct</span> <span class="nc">func_pair</span><span class="o">&lt;</span><span class="n">R1</span><span class="p">(</span><span class="n">A1</span><span class="p">...),</span> <span class="n">R2</span><span class="p">(</span><span class="n">A2</span><span class="p">...)</span><span class="o">&gt;</span><span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="n">R1</span><span class="p">(</span><span class="n">A1</span><span class="p">...)</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="n">R2</span><span class="p">(</span><span class="n">A2</span><span class="p">...)</span><span class="o">&gt;</span> <span class="n">g</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">bool</span> <span class="nf">twice_as</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
	<span class="k">return</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="n">b</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">double</span> <span class="nf">sum_and_div</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">double</span> <span class="n">c</span><span class="p">){</span>
	<span class="k">return</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">/</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="n">func_pair</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">),</span> <span class="kt">double</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">double</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">funcs</span><span class="p">{</span><span class="n">twice_as</span><span class="p">,</span> <span class="n">sum_and_div</span> <span class="p">};</span>
	<span class="n">funcs</span><span class="p">.</span><span class="n">f</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>
	<span class="n">funcs</span><span class="p">.</span><span class="n">g</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">);</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>a class template that represents a pair of function pointers.</li> </ul> <h2 id="reference">Reference</h2> <p><a href="https://www.amazon.com/Template-Metaprogramming-everything-templates-metaprogramming-ebook/dp/B09ZHZFTKV">Template Metaprogramming with C++</a>: Learn everything about C++ templates and unlock the power of template metaprogramming - by <a href="https://www.amazon.com/Marius-Bancila/e/B07D8WMX23/ref=dp_byline_cont_ebooks_1">Marius Bancila</a> <strong>(Author)</strong></p>]]></content><author><name></name></author><category term="Tech"/><category term="C++"/><summary type="html"><![CDATA[Parameter packs]]></summary></entry><entry><title type="html">OpenGL Perspective Matrix</title><link href="https://qervas.github.io/blog/2024/perspective-matrix/" rel="alternate" type="text/html" title="OpenGL Perspective Matrix"/><published>2024-01-20T22:01:00+00:00</published><updated>2024-01-20T22:01:00+00:00</updated><id>https://qervas.github.io/blog/2024/perspective-matrix</id><content type="html" xml:base="https://qervas.github.io/blog/2024/perspective-matrix/"><![CDATA[<p>On the learning 3D compute graphics for initial lab. I come into a problem. It’s about near/far plane. When I adding more planets into the 3D solar system, some of them were culling for out of the perspective world.</p> <p>Thus, I want to make some changes on the given perspective matrix $P$, which represents a matrix with d=4, near=3, far=7 and aspect=1.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">GLfloat</span> <span class="n">P</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mf">4.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>  <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>
		   <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">4.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>   <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>
                   <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.5</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span>
		   <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">10.5</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">};</span>

</code></pre></div></div> <p>I don’t know the meaning of each digits. From <strong><a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/opengl-perspective-projection-matrix.html">this article</a></strong>, it demonstrates the maths principles behind it. Took me minutes reading it, And now I could construct a matrix with some variables which make it easier to control the whole perspective projection.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">GLfloat</span> <span class="n">fov</span> <span class="o">=</span> <span class="mf">60.</span><span class="n">f</span> <span class="o">*</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="mf">180.0</span><span class="n">f</span><span class="p">;</span>  <span class="c1">// Convert to radians</span>
	<span class="n">GLfloat</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">1.0</span><span class="n">f</span> <span class="o">/</span> <span class="n">tan</span><span class="p">(</span><span class="n">fov</span> <span class="o">/</span> <span class="mf">2.0</span><span class="n">f</span><span class="p">);</span>
	<span class="n">GLfloat</span> <span class="n">aspect</span> <span class="o">=</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">;</span>  <span class="c1">// Assuming a square viewport</span>
	<span class="n">GLfloat</span> <span class="n">near</span> <span class="o">=</span> <span class="mf">0.01</span><span class="n">f</span><span class="p">;</span>
	<span class="n">GLfloat</span> <span class="n">far</span> <span class="o">=</span> <span class="mf">15.0</span><span class="n">f</span><span class="p">;</span>

	<span class="n">GLfloat</span> <span class="n">P</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
	    <span class="n">f</span> <span class="o">/</span> <span class="n">aspect</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>                            <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>
	    <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>       <span class="n">f</span><span class="p">,</span>    <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>                            <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>
	    <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>       <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="p">(</span><span class="n">far</span> <span class="o">+</span> <span class="n">near</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">near</span> <span class="o">-</span> <span class="n">far</span><span class="p">),</span>    <span class="o">-</span><span class="mf">1.0</span><span class="n">f</span> <span class="p">,</span>
	    <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>       <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">far</span> <span class="o">*</span> <span class="n">near</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">near</span> <span class="o">-</span> <span class="n">far</span><span class="p">),</span> <span class="mf">0.0</span><span class="n">f</span>
	<span class="p">};</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/date/Jan_20_2024/solar-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/date/Jan_20_2024/solar-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/date/Jan_20_2024/solar-1400.webp"/> <img src="/assets/img/date/Jan_20_2024/solar.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="Tech"/><category term="graphics"/><summary type="html"><![CDATA[perspective matrix]]></summary></entry></feed>